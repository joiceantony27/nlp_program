{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5gklbbGjDGUn",
        "outputId": "e2055c32-7cf8-47b1-ffa7-314c9349db3c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt_tab.zip.\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔹 Tokenization\n",
            "Original: Major technology companies are investing heavily in artificial intelligence.\n",
            "Tokens: ['Major', 'technology', 'companies', 'are', 'investing', 'heavily', 'in', 'artificial', 'intelligence', '.']\n",
            "\n",
            "Original: People are posting about climate change and sustainable living on social media.\n",
            "Tokens: ['People', 'are', 'posting', 'about', 'climate', 'change', 'and', 'sustainable', 'living', 'on', 'social', 'media', '.']\n",
            "\n",
            "Original: Morning yoga and high-protein diets are trending among fitness enthusiasts.\n",
            "Tokens: ['Morning', 'yoga', 'and', 'high-protein', 'diets', 'are', 'trending', 'among', 'fitness', 'enthusiasts', '.']\n",
            "\n",
            "🔹 Stopword Removal\n",
            "Filtered Tokens: ['Major', 'technology', 'companies', 'investing', 'heavily', 'artificial', 'intelligence', '.']\n",
            "\n",
            "Filtered Tokens: ['People', 'posting', 'climate', 'change', 'sustainable', 'living', 'social', 'media', '.']\n",
            "\n",
            "Filtered Tokens: ['Morning', 'yoga', 'high-protein', 'diets', 'trending', 'among', 'fitness', 'enthusiasts', '.']\n",
            "\n",
            "🔹 Stemming\n",
            "Stemmed: ['major', 'technolog', 'compani', 'are', 'invest', 'heavili', 'in', 'artifici', 'intellig', '.']\n",
            "\n",
            "Stemmed: ['peopl', 'are', 'post', 'about', 'climat', 'chang', 'and', 'sustain', 'live', 'on', 'social', 'media', '.']\n",
            "\n",
            "Stemmed: ['morn', 'yoga', 'and', 'high-protein', 'diet', 'are', 'trend', 'among', 'fit', 'enthusiast', '.']\n",
            "\n",
            "🔹 Lemmatization\n",
            "Lemmatized: ['Major', 'technology', 'company', 'are', 'investing', 'heavily', 'in', 'artificial', 'intelligence', '.']\n",
            "\n",
            "Lemmatized: ['People', 'are', 'posting', 'about', 'climate', 'change', 'and', 'sustainable', 'living', 'on', 'social', 'medium', '.']\n",
            "\n",
            "Lemmatized: ['Morning', 'yoga', 'and', 'high-protein', 'diet', 'are', 'trending', 'among', 'fitness', 'enthusiast', '.']\n",
            "\n",
            "🔹 Lemmatization with spaCy\n",
            "spaCy Lemmas: ['major', 'technology', 'company', 'be', 'invest', 'heavily', 'in', 'artificial', 'intelligence', '.']\n",
            "\n",
            "spaCy Lemmas: ['People', 'be', 'post', 'about', 'climate', 'change', 'and', 'sustainable', 'live', 'on', 'social', 'medium', '.']\n",
            "\n",
            "spaCy Lemmas: ['morning', 'yoga', 'and', 'high', '-', 'protein', 'diet', 'be', 'trend', 'among', 'fitness', 'enthusiast', '.']\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# CADL1: Preprocessing Steps\n",
        "# Import libraries\n",
        "import nltk\n",
        "import spacy\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import PorterStemmer, WordNetLemmatizer\n",
        "\n",
        "# Download NLTK resources (run once)\n",
        "nltk.download('punkt')\n",
        "nltk.download(\"punkt_tab\")  # punkt tables (new requirement in recent NLTK versions)\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "\n",
        "# Sample text corpus\n",
        "corpus = [\n",
        "    \"Major technology companies are investing heavily in artificial intelligence.\",\n",
        "    \"People are posting about climate change and sustainable living on social media.\",\n",
        "    \"Morning yoga and high-protein diets are trending among fitness enthusiasts.\"\n",
        "]\n",
        "\n",
        "# Tokenization (NLTK)\n",
        "print(\"🔹 Tokenization\")\n",
        "for text in corpus:\n",
        "    tokens = word_tokenize(text)\n",
        "    print(f\"Original: {text}\")\n",
        "    print(f\"Tokens: {tokens}\\n\")\n",
        "\n",
        "# Stopword removal (NLTK)\n",
        "stop_words = set(stopwords.words('english'))\n",
        "print(\"🔹 Stopword Removal\")\n",
        "for text in corpus:\n",
        "    tokens = word_tokenize(text)\n",
        "    filtered = [w for w in tokens if w.lower() not in stop_words]\n",
        "    print(f\"Filtered Tokens: {filtered}\\n\")\n",
        "\n",
        "# Stemming (NLTK - PorterStemmer)\n",
        "ps = PorterStemmer()\n",
        "print(\"🔹 Stemming\")\n",
        "for text in corpus:\n",
        "    tokens = word_tokenize(text)\n",
        "    stemmed = [ps.stem(w) for w in tokens]\n",
        "    print(f\"Stemmed: {stemmed}\\n\")\n",
        "\n",
        "# Lemmatization (NLTK - WordNetLemmatizer)\n",
        "lemmatizer = WordNetLemmatizer()\n",
        "print(\"🔹 Lemmatization\")\n",
        "for text in corpus:\n",
        "    tokens = word_tokenize(text)\n",
        "    lemmatized = [lemmatizer.lemmatize(w) for w in tokens]\n",
        "    print(f\"Lemmatized: {lemmatized}\\n\")\n",
        "\n",
        "# Lemmatization with spaCy\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "print(\"🔹 Lemmatization with spaCy\")\n",
        "for text in corpus:\n",
        "    doc = nlp(text)\n",
        "    lemmas = [token.lemma_ for token in doc]\n",
        "    print(f\"spaCy Lemmas: {lemmas}\\n\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# CADL2: Feature Extraction\n",
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
        "\n",
        "# Dataset (movie reviews / tweets style)\n",
        "docs = [\n",
        "    \"I loved the movie, it was fantastic!\",\n",
        "    \"The movie was terrible and boring.\",\n",
        "    \"An amazing performance by the lead actor.\",\n",
        "    \"I didn’t like the film, it was disappointing.\"\n",
        "]\n",
        "\n",
        "# Bag of Words\n",
        "print(\"🔹 Bag of Words Representation\")\n",
        "vectorizer = CountVectorizer()\n",
        "X_bow = vectorizer.fit_transform(docs)\n",
        "print(vectorizer.get_feature_names_out())\n",
        "print(X_bow.toarray())\n",
        "\n",
        "# TF-IDF\n",
        "print(\"\\n🔹 TF-IDF Representation\")\n",
        "tfidf = TfidfVectorizer()\n",
        "X_tfidf = tfidf.fit_transform(docs)\n",
        "print(tfidf.get_feature_names_out())\n",
        "print(X_tfidf.toarray())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uifjMukVFTwQ",
        "outputId": "e25b80ab-fed1-49a8-c914-b20ce68f4085"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔹 Bag of Words Representation\n",
            "['actor' 'amazing' 'an' 'and' 'boring' 'by' 'didn' 'disappointing'\n",
            " 'fantastic' 'film' 'it' 'lead' 'like' 'loved' 'movie' 'performance'\n",
            " 'terrible' 'the' 'was']\n",
            "[[0 0 0 0 0 0 0 0 1 0 1 0 0 1 1 0 0 1 1]\n",
            " [0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 1 1 1]\n",
            " [1 1 1 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0]\n",
            " [0 0 0 0 0 0 1 1 0 1 1 0 1 0 0 0 0 1 1]]\n",
            "\n",
            "🔹 TF-IDF Representation\n",
            "['actor' 'amazing' 'an' 'and' 'boring' 'by' 'didn' 'disappointing'\n",
            " 'fantastic' 'film' 'it' 'lead' 'like' 'loved' 'movie' 'performance'\n",
            " 'terrible' 'the' 'was']\n",
            "[[0.         0.         0.         0.         0.         0.\n",
            "  0.         0.         0.50488863 0.         0.39806    0.\n",
            "  0.         0.50488863 0.39806    0.         0.         0.26347183\n",
            "  0.32226387]\n",
            " [0.         0.         0.         0.48216873 0.48216873 0.\n",
            "  0.         0.         0.         0.         0.         0.\n",
            "  0.         0.         0.38014737 0.         0.48216873 0.25161565\n",
            "  0.30776206]\n",
            " [0.39928771 0.39928771 0.39928771 0.         0.         0.39928771\n",
            "  0.         0.         0.         0.         0.         0.39928771\n",
            "  0.         0.         0.         0.39928771 0.         0.20836489\n",
            "  0.        ]\n",
            " [0.         0.         0.         0.         0.         0.\n",
            "  0.4343181  0.4343181  0.         0.4343181  0.34242138 0.\n",
            "  0.4343181  0.         0.         0.         0.         0.2266452\n",
            "  0.27721962]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# CADL3: Named Entity Recognition\n",
        "import spacy\n",
        "import pandas as pd\n",
        "\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "# Example dataset: job postings\n",
        "text = \"\"\"\n",
        "OpenAI is hiring Machine Learning Engineers in San Francisco.\n",
        "Google announced a new AI research center in London.\n",
        "Dr. Smith from MIT collaborated with Microsoft Research.\n",
        "\"\"\"\n",
        "\n",
        "doc = nlp(text)\n",
        "\n",
        "# Extract named entities\n",
        "print(\"🔹 Named Entities\")\n",
        "for ent in doc.ents:\n",
        "    print(ent.text, ent.label_)\n",
        "\n",
        "# Structured Information (Persons and Organizations)\n",
        "entities = [(ent.text, ent.label_) for ent in doc.ents]\n",
        "df = pd.DataFrame(entities, columns=[\"Entity\", \"Type\"])\n",
        "print(\"\\nStructured Info:\\n\", df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5_WVUkPVFf9n",
        "outputId": "20f884ad-3ba9-4780-afb8-6a8d2e08395c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔹 Named Entities\n",
            "OpenAI PERSON\n",
            "Machine Learning Engineers ORG\n",
            "San Francisco GPE\n",
            "Google ORG\n",
            "AI GPE\n",
            "London GPE\n",
            "Smith PERSON\n",
            "MIT ORG\n",
            "Microsoft Research ORG\n",
            "\n",
            "Structured Info:\n",
            "                        Entity    Type\n",
            "0                      OpenAI  PERSON\n",
            "1  Machine Learning Engineers     ORG\n",
            "2               San Francisco     GPE\n",
            "3                      Google     ORG\n",
            "4                          AI     GPE\n",
            "5                      London     GPE\n",
            "6                       Smith  PERSON\n",
            "7                         MIT     ORG\n",
            "8          Microsoft Research     ORG\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install gensim\n",
        "!pip install pyLDAvis\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gJ9Ky6QAGUr2",
        "outputId": "24eebff1-06da-4f3d-84dc-1f22e5280283"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: gensim in /usr/local/lib/python3.12/dist-packages (4.3.3)\n",
            "Requirement already satisfied: numpy<2.0,>=1.18.5 in /usr/local/lib/python3.12/dist-packages (from gensim) (1.26.4)\n",
            "Requirement already satisfied: scipy<1.14.0,>=1.7.0 in /usr/local/lib/python3.12/dist-packages (from gensim) (1.13.1)\n",
            "Requirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.12/dist-packages (from gensim) (7.3.0.post1)\n",
            "Requirement already satisfied: wrapt in /usr/local/lib/python3.12/dist-packages (from smart-open>=1.8.1->gensim) (1.17.3)\n",
            "Collecting pyLDAvis\n",
            "  Downloading pyLDAvis-3.4.1-py3-none-any.whl.metadata (4.2 kB)\n",
            "Requirement already satisfied: numpy>=1.24.2 in /usr/local/lib/python3.12/dist-packages (from pyLDAvis) (1.26.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.12/dist-packages (from pyLDAvis) (1.13.1)\n",
            "Requirement already satisfied: pandas>=2.0.0 in /usr/local/lib/python3.12/dist-packages (from pyLDAvis) (2.2.2)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.12/dist-packages (from pyLDAvis) (1.5.1)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.12/dist-packages (from pyLDAvis) (3.1.6)\n",
            "Requirement already satisfied: numexpr in /usr/local/lib/python3.12/dist-packages (from pyLDAvis) (2.11.0)\n",
            "Collecting funcy (from pyLDAvis)\n",
            "  Downloading funcy-2.0-py2.py3-none-any.whl.metadata (5.9 kB)\n",
            "Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.12/dist-packages (from pyLDAvis) (1.6.1)\n",
            "Requirement already satisfied: gensim in /usr/local/lib/python3.12/dist-packages (from pyLDAvis) (4.3.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.12/dist-packages (from pyLDAvis) (75.2.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas>=2.0.0->pyLDAvis) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas>=2.0.0->pyLDAvis) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas>=2.0.0->pyLDAvis) (2025.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn>=1.0.0->pyLDAvis) (3.6.0)\n",
            "Requirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.12/dist-packages (from gensim->pyLDAvis) (7.3.0.post1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.12/dist-packages (from jinja2->pyLDAvis) (3.0.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas>=2.0.0->pyLDAvis) (1.17.0)\n",
            "Requirement already satisfied: wrapt in /usr/local/lib/python3.12/dist-packages (from smart-open>=1.8.1->gensim->pyLDAvis) (1.17.3)\n",
            "Downloading pyLDAvis-3.4.1-py3-none-any.whl (2.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.6/2.6 MB\u001b[0m \u001b[31m31.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading funcy-2.0-py2.py3-none-any.whl (30 kB)\n",
            "Installing collected packages: funcy, pyLDAvis\n",
            "Successfully installed funcy-2.0 pyLDAvis-3.4.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# CADL4: Topic Modeling with LDA\n",
        "import gensim\n",
        "from gensim import corpora\n",
        "from nltk.corpus import stopwords\n",
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "\n",
        "# Sample text corpus\n",
        "corpus = [\n",
        "    \"AI and machine learning are revolutionizing healthcare.\",\n",
        "    \"Renewable energy sources are key to fighting climate change.\",\n",
        "    \"The stock market fluctuates based on economic and political news.\",\n",
        "    \"Yoga and meditation are becoming popular for mental health.\",\n",
        "    \"Mars missions are advancing space exploration and technology.\"\n",
        "]\n",
        "\n",
        "# Preprocessing\n",
        "stop_words = stopwords.words('english')\n",
        "texts = [[word.lower() for word in doc.split() if word.lower() not in stop_words] for doc in corpus]\n",
        "\n",
        "# Dictionary and Corpus\n",
        "dictionary = corpora.Dictionary(texts)\n",
        "doc_term_matrix = [dictionary.doc2bow(text) for text in texts]\n",
        "\n",
        "# LDA Model\n",
        "lda_model = gensim.models.LdaModel(doc_term_matrix, num_topics=3, id2word=dictionary, passes=15)\n",
        "\n",
        "# Print topics\n",
        "print(\"🔹 Topics Identified\")\n",
        "for idx, topic in lda_model.print_topics(num_words=5):\n",
        "    print(f\"Topic {idx}: {topic}\")\n",
        "\n",
        "# Visualization with pyLDAvis\n",
        "import pyLDAvis.gensim_models as gensimvis\n",
        "import pyLDAvis\n",
        "\n",
        "pyLDAvis.enable_notebook()\n",
        "vis = gensimvis.prepare(lda_model, doc_term_matrix, dictionary)\n",
        "vis\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6Xed-0RYF_zj",
        "outputId": "c977d20a-1eff-442f-b24d-1c224510dc11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔹 Topics Identified\n",
            "Topic 0: 0.055*\"key\" + 0.055*\"climate\" + 0.055*\"sources\" + 0.055*\"news.\" + 0.055*\"stock\"\n",
            "Topic 1: 0.082*\"yoga\" + 0.082*\"mental\" + 0.082*\"popular\" + 0.082*\"becoming\" + 0.082*\"meditation\"\n",
            "Topic 2: 0.062*\"learning\" + 0.062*\"revolutionizing\" + 0.062*\"healthcare.\" + 0.062*\"ai\" + 0.062*\"machine\"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PreparedData(topic_coordinates=              x         y  topics  cluster       Freq\n",
              "topic                                                \n",
              "0      0.089001 -0.033299       1        1  44.117880\n",
              "2     -0.084511 -0.038906       2        1  34.643645\n",
              "1     -0.004491  0.072205       3        1  21.238475, topic_info=          Term      Freq     Total Category  logprob  loglift\n",
              "24        yoga  0.000000  0.000000  Default  30.0000  30.0000\n",
              "22      mental  0.000000  0.000000  Default  29.0000  29.0000\n",
              "23     popular  0.000000  0.000000  Default  28.0000  28.0000\n",
              "19    becoming  0.000000  0.000000  Default  27.0000  27.0000\n",
              "21  meditation  0.000000  0.000000  Default  26.0000  26.0000\n",
              "..         ...       ...       ...      ...      ...      ...\n",
              "9          key  0.134448  1.051614   Topic3  -3.8912  -0.5075\n",
              "15      market  0.134447  1.051614   Topic3  -3.8912  -0.5076\n",
              "11     sources  0.134447  1.051614   Topic3  -3.8912  -0.5076\n",
              "6      climate  0.134447  1.051614   Topic3  -3.8912  -0.5076\n",
              "16       news.  0.134447  1.051614   Topic3  -3.8912  -0.5076\n",
              "\n",
              "[122 rows x 6 columns], token_table=      Topic      Freq             Term\n",
              "term                                  \n",
              "25        2  1.007043        advancing\n",
              "0         2  1.006953               ai\n",
              "12        1  0.950920            based\n",
              "19        3  1.120686         becoming\n",
              "5         1  0.950920          change.\n",
              "6         1  0.950919          climate\n",
              "13        1  0.950920         economic\n",
              "7         1  0.950919           energy\n",
              "26        2  1.007012      exploration\n",
              "8         1  0.950920         fighting\n",
              "14        1  0.950920       fluctuates\n",
              "20        3  1.120685          health.\n",
              "1         2  1.006953      healthcare.\n",
              "9         1  0.950919              key\n",
              "2         2  1.006952         learning\n",
              "3         2  1.006953          machine\n",
              "15        1  0.950919           market\n",
              "27        2  1.007059             mars\n",
              "21        3  1.120686       meditation\n",
              "22        3  1.120689           mental\n",
              "28        2  1.007052         missions\n",
              "16        1  0.950919            news.\n",
              "17        1  0.950920        political\n",
              "23        3  1.120688          popular\n",
              "10        1  0.950921        renewable\n",
              "4         2  1.006953  revolutionizing\n",
              "11        1  0.950919          sources\n",
              "29        2  1.007019            space\n",
              "18        1  0.950919            stock\n",
              "30        2  1.007034      technology.\n",
              "24        3  1.120690             yoga, R=30, lambda_step=0.01, plot_opts={'xlab': 'PC1', 'ylab': 'PC2'}, topic_order=[1, 3, 2])"
            ],
            "text/html": [
              "\n",
              "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v1.0.0.css\">\n",
              "\n",
              "\n",
              "<div id=\"ldavis_el45621322657178733607736688680\" style=\"background-color:white;\"></div>\n",
              "<script type=\"text/javascript\">\n",
              "\n",
              "var ldavis_el45621322657178733607736688680_data = {\"mdsDat\": {\"x\": [0.08900125036780072, -0.08451067494176398, -0.004490575426036722], \"y\": [-0.03329948347656358, -0.03890559405770012, 0.0722050775342637], \"topics\": [1, 2, 3], \"cluster\": [1, 1, 1], \"Freq\": [44.11788019130429, 34.643645093331635, 21.238474715364074]}, \"tinfo\": {\"Term\": [\"yoga\", \"mental\", \"popular\", \"becoming\", \"meditation\", \"health.\", \"learning\", \"revolutionizing\", \"healthcare.\", \"ai\", \"machine\", \"exploration\", \"space\", \"technology.\", \"advancing\", \"missions\", \"mars\", \"key\", \"climate\", \"sources\", \"stock\", \"news.\", \"political\", \"change.\", \"market\", \"fluctuates\", \"based\", \"fighting\", \"renewable\", \"energy\", \"key\", \"climate\", \"sources\", \"news.\", \"stock\", \"change.\", \"political\", \"market\", \"energy\", \"fighting\", \"fluctuates\", \"based\", \"economic\", \"renewable\", \"meditation\", \"becoming\", \"health.\", \"popular\", \"mental\", \"yoga\", \"machine\", \"ai\", \"revolutionizing\", \"healthcare.\", \"learning\", \"space\", \"missions\", \"mars\", \"exploration\", \"advancing\", \"technology.\", \"learning\", \"revolutionizing\", \"healthcare.\", \"ai\", \"machine\", \"exploration\", \"space\", \"technology.\", \"advancing\", \"missions\", \"mars\", \"health.\", \"popular\", \"meditation\", \"becoming\", \"yoga\", \"mental\", \"economic\", \"energy\", \"fighting\", \"market\", \"based\", \"renewable\", \"fluctuates\", \"news.\", \"change.\", \"political\", \"stock\", \"sources\", \"climate\", \"key\", \"yoga\", \"mental\", \"popular\", \"becoming\", \"meditation\", \"health.\", \"mars\", \"missions\", \"advancing\", \"technology.\", \"space\", \"exploration\", \"machine\", \"ai\", \"healthcare.\", \"revolutionizing\", \"learning\", \"renewable\", \"fluctuates\", \"based\", \"political\", \"change.\", \"fighting\", \"economic\", \"stock\", \"key\", \"market\", \"sources\", \"climate\", \"news.\"], \"Freq\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7490983008352261, 0.7490974347006425, 0.7490965685660589, 0.7490962628715, 0.7490954986351027, 0.7490938682641218, 0.7490937154168424, 0.749092951180445, 0.7490928492822588, 0.7490912698603711, 0.7490900470821353, 0.7490898432857628, 0.7490888243038998, 0.7490866334928942, 0.18756474303158463, 0.18756397879518732, 0.18756294707605098, 0.18755789037855558, 0.1875559033639226, 0.18755434941658147, 0.18765437522371356, 0.18764649085154816, 0.1876417143740651, 0.1876406571803822, 0.1876405552821959, 0.18761853253668062, 0.18761141240091253, 0.18760816439622402, 0.18760938717445969, 0.1876033624441944, 0.1876045470106102, 0.6709616222677025, 0.670959221795658, 0.6709569413472158, 0.6709485396950601, 0.6709397779720978, 0.6707140535841826, 0.6706642037813924, 0.6706118734908229, 0.6705674247501328, 0.6705154545303699, 0.6704845284488636, 0.1680369838880202, 0.1680334231878209, 0.1680323429754009, 0.16803170284952237, 0.16803068264890347, 0.16803060263316866, 0.1680764716531518, 0.16807483133058806, 0.16807417120077583, 0.1680734510591625, 0.168073010972621, 0.16807273091754915, 0.16807273091754915, 0.1680714906736595, 0.16807105058711802, 0.16807073052417876, 0.16807051048090801, 0.16807051048090801, 0.16807013040616764, 0.16806811000886354, 0.5367224274432965, 0.536721348253522, 0.5367176691974727, 0.536714725952633, 0.5367135977087779, 0.5367111940588256, 0.1348980963715769, 0.13487099399201302, 0.13483523356721291, 0.13479887222992476, 0.1347469975396283, 0.13471371434590146, 0.13450096679808515, 0.13449958102030657, 0.1344970669986728, 0.1344944426053576, 0.1344933634155831, 0.13445261173807596, 0.13445010997996237, 0.1344500363988414, 0.13444905531722823, 0.1344487242021838, 0.13444811102617554, 0.13444797612745374, 0.13444798839097388, 0.13444786575577225, 0.1344474365325665, 0.13444725257976403, 0.1344469092011994, 0.13444665166727596], \"Total\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.051614276599862, 1.0516144743080096, 1.051614331626731, 1.0516144052124354, 1.0516139975069847, 1.0516136430534235, 1.0516135012582495, 1.051613838772174, 1.0516140747461995, 1.0516135520873224, 1.051612887979647, 1.0516128906572253, 1.0516132720845053, 1.0516119761485192, 0.8923106837157635, 0.8923104075973427, 0.8923111250228968, 0.8923089827638492, 0.8923078542506133, 0.8923074595087814, 0.9930951199938964, 0.9930946115669148, 0.9930953787750807, 0.9930946655262708, 0.9930955409654816, 0.9930297338577012, 0.9929978609232955, 0.9929907892166645, 0.9930371551045436, 0.9930060207615401, 0.9930152927313578, 0.9930955409654816, 0.9930953787750807, 0.9930946655262708, 0.9930946115669148, 0.9930951199938964, 0.9930371551045436, 0.9930297338577012, 0.9930152927313578, 0.9930060207615401, 0.9929978609232955, 0.9929907892166645, 0.8923111250228968, 0.8923089827638492, 0.8923106837157635, 0.8923104075973427, 0.8923074595087814, 0.8923078542506133, 1.0516132720845053, 1.0516140747461995, 1.0516135520873224, 1.051613838772174, 1.0516128906572253, 1.0516119761485192, 1.051612887979647, 1.0516144052124354, 1.0516136430534235, 1.0516135012582495, 1.0516139975069847, 1.051614331626731, 1.0516144743080096, 1.051614276599862, 0.8923074595087814, 0.8923078542506133, 0.8923089827638492, 0.8923104075973427, 0.8923106837157635, 0.8923111250228968, 0.9929907892166645, 0.9929978609232955, 0.9930060207615401, 0.9930152927313578, 0.9930297338577012, 0.9930371551045436, 0.9930951199938964, 0.9930946115669148, 0.9930946655262708, 0.9930953787750807, 0.9930955409654816, 1.0516119761485192, 1.051612887979647, 1.0516128906572253, 1.0516135012582495, 1.0516136430534235, 1.0516135520873224, 1.0516132720845053, 1.0516139975069847, 1.051614276599862, 1.051613838772174, 1.051614331626731, 1.0516144743080096, 1.0516144052124354], \"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\"], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -2.9046, -2.9046, -2.9046, -2.9046, -2.9046, -2.9046, -2.9046, -2.9046, -2.9046, -2.9046, -2.9046, -2.9046, -2.9046, -2.9046, -4.2893, -4.2893, -4.2893, -4.2893, -4.2894, -4.2894, -4.2888, -4.2889, -4.2889, -4.2889, -4.2889, -4.289, -4.2891, -4.2891, -4.2891, -4.2891, -4.2891, -2.773, -2.773, -2.773, -2.773, -2.773, -2.7733, -2.7734, -2.7735, -2.7736, -2.7736, -2.7737, -4.1575, -4.1575, -4.1575, -4.1575, -4.1575, -4.1575, -4.1573, -4.1573, -4.1573, -4.1573, -4.1573, -4.1573, -4.1573, -4.1573, -4.1573, -4.1573, -4.1573, -4.1573, -4.1573, -4.1573, -2.5069, -2.5069, -2.5069, -2.5069, -2.5069, -2.5069, -3.8879, -3.8881, -3.8883, -3.8886, -3.889, -3.8892, -3.8908, -3.8908, -3.8908, -3.8909, -3.8909, -3.8912, -3.8912, -3.8912, -3.8912, -3.8912, -3.8912, -3.8912, -3.8912, -3.8912, -3.8912, -3.8912, -3.8912, -3.8912], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.4791, 0.4791, 0.4791, 0.4791, 0.4791, 0.4791, 0.4791, 0.4791, 0.4791, 0.4791, 0.4791, 0.4791, 0.4791, 0.4791, -0.7414, -0.7414, -0.7414, -0.7414, -0.7414, -0.7414, -0.8479, -0.848, -0.848, -0.848, -0.848, -0.848, -0.8481, -0.8481, -0.8481, -0.8481, -0.8481, 0.6679, 0.6679, 0.6679, 0.6679, 0.6679, 0.6676, 0.6676, 0.6675, 0.6674, 0.6674, 0.6673, -0.6096, -0.6096, -0.6096, -0.6096, -0.6096, -0.6096, -0.7736, -0.7736, -0.7736, -0.7736, -0.7736, -0.7736, -0.7736, -0.7736, -0.7736, -0.7736, -0.7736, -0.7736, -0.7736, -0.7737, 1.041, 1.041, 1.041, 1.041, 1.041, 1.041, -0.4468, -0.4471, -0.4473, -0.4476, -0.448, -0.4483, -0.4499, -0.4499, -0.4499, -0.4499, -0.45, -0.5075, -0.5075, -0.5075, -0.5075, -0.5075, -0.5075, -0.5075, -0.5075, -0.5075, -0.5076, -0.5076, -0.5076, -0.5076]}, \"token.table\": {\"Topic\": [2, 2, 1, 3, 1, 1, 1, 1, 2, 1, 1, 3, 2, 1, 2, 2, 1, 2, 3, 3, 2, 1, 1, 3, 1, 2, 1, 2, 1, 2, 3], \"Freq\": [1.0070432395093598, 1.0069534043913397, 0.950920256763904, 1.120686244927508, 0.9509195764106291, 0.9509188247508924, 0.950919911858665, 0.9509191860534424, 1.0070116660385415, 0.9509196586665549, 0.9509202591851025, 1.120685343886461, 1.0069533496789753, 0.9509190035278485, 1.0069524620237504, 1.0069528888694428, 0.9509193994323653, 1.0070586866056077, 1.120685898140092, 1.1206894517809998, 1.007051514763782, 0.9509188872303352, 0.9509197046286547, 1.1206880344324084, 0.9509210837085122, 1.0069526264772632, 0.9509189537699725, 1.007019191777089, 0.9509192558967989, 1.0070338365579752, 1.1206899475551888], \"Term\": [\"advancing\", \"ai\", \"based\", \"becoming\", \"change.\", \"climate\", \"economic\", \"energy\", \"exploration\", \"fighting\", \"fluctuates\", \"health.\", \"healthcare.\", \"key\", \"learning\", \"machine\", \"market\", \"mars\", \"meditation\", \"mental\", \"missions\", \"news.\", \"political\", \"popular\", \"renewable\", \"revolutionizing\", \"sources\", \"space\", \"stock\", \"technology.\", \"yoga\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [1, 3, 2]};\n",
              "\n",
              "function LDAvis_load_lib(url, callback){\n",
              "  var s = document.createElement('script');\n",
              "  s.src = url;\n",
              "  s.async = true;\n",
              "  s.onreadystatechange = s.onload = callback;\n",
              "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
              "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
              "}\n",
              "\n",
              "if(typeof(LDAvis) !== \"undefined\"){\n",
              "   // already loaded: just create the visualization\n",
              "   !function(LDAvis){\n",
              "       new LDAvis(\"#\" + \"ldavis_el45621322657178733607736688680\", ldavis_el45621322657178733607736688680_data);\n",
              "   }(LDAvis);\n",
              "}else if(typeof define === \"function\" && define.amd){\n",
              "   // require.js is available: use it to load d3/LDAvis\n",
              "   require.config({paths: {d3: \"https://d3js.org/d3.v5\"}});\n",
              "   require([\"d3\"], function(d3){\n",
              "      window.d3 = d3;\n",
              "      LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
              "        new LDAvis(\"#\" + \"ldavis_el45621322657178733607736688680\", ldavis_el45621322657178733607736688680_data);\n",
              "      });\n",
              "    });\n",
              "}else{\n",
              "    // require.js not available: dynamically load d3 & LDAvis\n",
              "    LDAvis_load_lib(\"https://d3js.org/d3.v5.js\", function(){\n",
              "         LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
              "                 new LDAvis(\"#\" + \"ldavis_el45621322657178733607736688680\", ldavis_el45621322657178733607736688680_data);\n",
              "            })\n",
              "         });\n",
              "}\n",
              "</script>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n",
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:151: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    }
  ]
}